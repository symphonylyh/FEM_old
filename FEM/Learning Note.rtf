{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Consolas;\f2\fswiss\fcharset0 ArialMT;
\f3\fnil\fcharset134 PingFangSC-Regular;\f4\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red36\green38\blue41;\red235\green236\blue237;\red37\green127\blue159;
\red104\green26\blue29;\red27\green29\blue31;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;
}
{\*\expandedcolortbl;;\cssrgb\c18824\c20000\c21176;\cssrgb\c93725\c94118\c94510;\cssrgb\c16863\c56863\c68627;
\cssrgb\c49020\c15294\c15294;\cssrgb\c14118\c15294\c16078;\cssrgb\c100000\c100000\c100000;\csgenericrgb\c0\c0\c0;\csgenericrgb\c100000\c100000\c100000;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww21600\viewh16500\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs48 \cf0 Initializer list:\

\b0 1. Reference variable. Can only be initialized using init list\
2. The sequence in a init list should follow the sequence they are declared in the class\
3. if we have a std::vector member, we can't fix its size by vector<int> a(5); but we can only do that using a init list: .h: vector<int> a  .cpp: Class() : a(5) \{...\}. But more generally, if we know the size already, we can use std::array<int, 5>\
\

\b Static member in a class:\

\b0 The benefit is efficiency b/c we use shared memory between different class instances\
\
.h:\
class A \{\
		public:\
			static int a;\
		private:\
			static int b;\
\};\
\
.cpp (defined outside the class body):\
int A::a = 0;\
int A::b = 0;\
\
other.cpp:\
outside the class body where the static member is defined, we can use "::" to access it:\
A::a = 1; // valid, b/c a is public and can be accessed outside, and can also be modified\
A::b = 1; // invalid, b is private\
\
1. static member is a belonging of the whole class. It doesn't depend on any instance of the class. So no matter how many instances of that class are created, there is 
\b only one single copy
\b0  of the static member allocated in memory\
2. static member/function is allocated before any instances, so you can't use a non-static member variable in a static function (b/c the non-static member doesn't exist yet). Similarly, you can call a static function by Class::fun() but you can't do so for a non-static fun(), b/c non-static member/functions are depending on specific objects/instances!\
3. static member can only be 
\b defined outside the class body
\b0 , usually at the start of the .cpp file (why? b/c if we define it in ctor or init list, then every creation of instance will assign the static member)\
4. static member can be accessed via Class::var_name  outside the class body (according to public/private qualifier). If we want to access\
5. you can use a static function to manage the static member variables.\
6. a static member must be initialized (in .cpp)\
\
Q: what if I want to have a static pointer member? I can initialize by a "new", but how can I delete it? e.g.:\
\
.h:\
class A \{\
		public:\
			static int* a;\
\};\
\
.cpp (defined outside the class body):\
int* A::a = new int(0); // where to delete it then?\
\
Option1: at the end of my main(), manually delete it by delete A::a; but, when we are in a big project, we can't tell the user "remember to delete it"! it's not an elegant solution\
Option2: create a static struct (or helper subclass) inside this class, to let its ctor and dtor do the new & delete work. e.g.:\
Ref: \
https://www.developerfusion.com/thread/49467/how-do-i-initialise-clean-up-static-variables\
.h:\
class A \{\
		public: // definition\
			struct staticMember \{\
					int* a;\
					// ctor\
					staticMember() \{\
							a = new int(0);\
					\}	\
					// dtor\
					~staticMember() \{\
							delete a; a = NULL;\
					\}\
			\};\
		\
		public:\
			static staticMember hello;\
\};\
\
.cpp:\
A::staticMember A::hello; // this will call its default ctor \
\

\b Doxygen:\

\b0 0. Doxywizard-File-Open-choose existing file
\b \

\b0 1. Comment style: Expert-Project-JAVADOC_AUTOBRIEF-YES\
2. Hide source code: Expert-Source Browser-STRIP_CODE_COMMENT/REFERENCE_LINK_SOURCE/VERBATIM_HEADER-NO\
3. Run Doxygen (need to check TeX and Graphviz installation)\

\b \
HTML:\

\b0 1. login to UI webhost:\
https://webhost.engr.illinois.edu
\b \

\b0 2. create folder and "drag" the Doxygen files to that folder\
3. open the index page with the following link:
\b \
{\field{\*\fldinst{HYPERLINK "http://hhuang81.web.engr.illinois.edu/FEM/html/index.html"}}{\fldrslt 
\b0 http://hhuang81.web.engr.illinois.edu/FEM/html/index.html}}
\b0 \
\

\b const qualifier:\

\b0 read from right to left, e.g.:\
int const * -- pointer to a const int\
int * const -- const pointer to a int\
Ref:\
https://stackoverflow.com/questions/1143262/what-is-the-difference-between-const-int-const-int-const-and-int-const\
http://www.cnblogs.com/jiabei521/p/3335676.html\
\
Initialize Eigen object with external STL array/vector:\
use Eigen::Map:\
\pard\pardeftab720\partightenfactor0

\f1\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
std::\cf4 vector\cf5 <double>\cf2  a = \{\cf5 1\cf2 , \cf5 2\cf2 , \cf5 3\cf2 , \cf5 4\cf2 \};\
\cf4 Eigen\cf2 ::\cf4 VectorXd\cf2  b = \cf4 Eigen\cf2 ::\cf4 Map\cf2 <\cf4 Eigen\cf2 ::\cf4 VectorXd\cf2 , \cf4 Eigen\cf2 ::\cf4 Unaligned\cf2 >(a.data(), a.size());\
\pard\pardeftab720\partightenfactor0

\f2 \cf6 \cb7 If the 
\f1 \cb3 a
\f2 \cb7  is instead a 
\f1 \cb3 const std::vector<double>
\f2 \cb7 , then change 
\f1 \cb3 Eigen::VectorXd
\f2 \cb7  to 
\f1 \cb3 const Eigen::VectorXd
\f0\fs48 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 Ref:\
http://eigen.tuxfamily.org/dox/group__QuickRefPage.html#title4\
https://stackoverflow.com/questions/17036818/initialise-eigenvector-with-stdvector/17037695\
https://stackoverflow.com/questions/36417836/assigning-a-vector-to-a-matrix-column-in-eigen?rq=1\
https://eigen.tuxfamily.org/dox/group__TopicStlContainers.html\
\

\b Solve linear system
\b0 :\
https://eigen.tuxfamily.org/dox/group__TutorialLinearAlgebra.html\
\

\b Visual Studio 2017:\

\b0 https://blog.csdn.net/column/details/visualstudio.html\
1. File-New-Project-Windows console application-Name/Location-OK\
2. Near "Debug", toggle "Solution platform" to "x64"\
3. Config Eigen:\
a. Download Eigen\
b. Right-click on the project name-Properties-C/C++-General\
c. Top bar, "configuration" to "All configurations", "Platform" to "All platforms"\
d. "Additional Include Directories" add the path to Eigen folder-OK\
4. Copy all the files except "Eigen" to the VS project folder\
5. Project-Add existing items-Choose the files\
6. Cancel precompiled head: Right-click on the project name-Properties-C/C++-Precompiled header-Not using precompile header\
*Note: VS doesn't recognize M_PI, so you should put \
#define _USE_MATH_DEFINES\
#include <cmath> \
as the very first lines in that file in order to use M_PI\
2018/3/27, successfully compile and run FEM on Windows console with VS2017!\
*Note
\f3 :
\f0  in debug mode, we should disable one thing:\
Properties-C/C++-command line-Additional options:\
-D_SCL_SECURE_NO_WARNINGS\
Ref:\
https://blog.csdn.net/m0_37579176/article/details/78902055\
\

\b Memory leak check in VS2017:\

\b0 Ref: https://yapingxin.github.io/2017/08/01/VLD_on_VC2017/\
1. Download installer: https://kinddragon.github.io/vld/\
2. Left bottom bar, choose Property Manager, look for Debug|Win32 and Debug|Win64 (VLD works in Debug mode).\
3. Right-click on Win32.user file, choose Properties-VC++ Directories\
a. Include Directories, add \\Visual Leak Detector\\include\\\
b. Library Directories, add \\Visual Leak Detector\\lib\\win32\
4. for Win64.user file, do the same thing with win64\
5. in main.cpp, #include  <vld.h>\
6. look for VS installation folder: 
\f4\fs26 \cf8 \cb9 \expnd0\expndtw0\kerning0
Microsoft Visual Studio\\2017\\Community\\Common7\\IDE\\CommonExtensions\\Microsoft\\TestWindow\\Extensions\\CppUnitFramework\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs48 \cf8 7. copy and paste the dbghelp.dll and /x64/dbghelp.dll to the \cf0 \cb1 \kerning1\expnd0\expndtw0  \\Visual Leak Detector\\bin\\win32 and \\bin\\win64, respectively\
8. run in debug mode to check memory leak\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\b \cf0 PyQt5:\

\b0 https://zhuanlan.zhihu.com/xdbcb8\
\

\b GUI:\

\b0 https://blog.csdn.net/iloveyoumj/article/details/51922769\
https://blog.csdn.net/cedricporter/article/details/6804989\
PyQt GUI + C++ core. Python call C++ core, using boost.python library, using cmake-->cross-platform. Update: using SWIG may be better. run C++ with SWIG, and python can directly use the output\
https://www.zhihu.com/question/23003213\
https://copie.cn/index.php/archives/Python
\f3 \'cf\'c2
\f0 swig
\f3 \'bb\'f9\'b4\'a1\'d6\'aa\'ca\'b6\'d7\'dc\'bd\'e1\'d5\'fb\'c0\'ed
\f0 -1.html\
\

\b Paraview+Python:\

\b0 http://xiaopingqiu.github.io/2016/08/27/ParaviewScritps/\
https://www.paraview.org/Wiki/ParaView/Python_Scripting\
Writing VTK from Python: https://www.vtk.org/Wiki/VTK/Writing_VTK_files_using_python\
Paraview Tutorial: http://www.bu.edu/tech/support/research/training-consulting/online-tutorials/paraview/\
Writing VTK from c++: http://www.parresianz.com/c++/xml/vtk/vtk-output/\
Paraview camera control on Mac:\
cmd + 3 finger: zoom in/out\
shift+ctrl+alt + 3 finger: move\
Show index:\
click split view near "Renderview1", select "Spreadsheet view"\

\b Eigen:
\b0 \
Eigen memory align problem:\
https://blog.csdn.net/rs_huangzs/article/details/50574141\
https://zhuanlan.zhihu.com/p/32226967\
Eigen on VS2017:\
http://eigen.tuxfamily.org/index.php?title=IDEs#Visual_Studio\
Speed up:\
https://blog.csdn.net/luozhen07/article/details/49428951\
https://blog.csdn.net/pukitoto/article/details/70838039\
\

\b Temperature Load:\

\b0 https://wenku.baidu.com/view/3f026ff90242a8956bece435.html}