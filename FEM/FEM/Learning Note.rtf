{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Consolas;\f2\fswiss\fcharset0 ArialMT;
}
{\colortbl;\red255\green255\blue255;\red36\green38\blue41;\red235\green236\blue237;\red37\green127\blue159;
\red104\green26\blue29;\red27\green29\blue31;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c18824\c20000\c21176;\cssrgb\c93725\c94118\c94510;\cssrgb\c16863\c56863\c68627;
\cssrgb\c49020\c15294\c15294;\cssrgb\c14118\c15294\c16078;\cssrgb\c100000\c100000\c100000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww21600\viewh16500\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs48 \cf0 Initializer list:\

\b0 1. Reference variable. Can only be initialized using init list\
2. The sequence in a init list should follow the sequence they are declared in the class\
3. if we have a std::vector member, we can't fix its size by vector<int> a(5); but we can only do that using a init list: .h: vector<int> a  .cpp: Class() : a(5) \{...\}. But more generally, if we know the size already, we can use std::array<int, 5>\
\

\b Static member in a class:\

\b0 The benefit is efficiency b/c we use shared memory between different class instances\
\
.h:\
class A \{\
		public:\
			static int a;\
		private:\
			static int b;\
\};\
\
.cpp (defined outside the class body):\
int A::a = 0;\
int A::b = 0;\
\
other.cpp:\
outside the class body where the static member is defined, we can use "::" to access it:\
A::a = 1; // valid, b/c a is public and can be accessed outside, and can also be modified\
A::b = 1; // invalid, b is private\
\
1. static member is a belonging of the whole class. It doesn't depend on any instance of the class. So no matter how many instances of that class are created, there is 
\b only one single copy
\b0  of the static member allocated in memory\
2. static member/function is allocated before any instances, so you can't use a non-static member variable in a static function (b/c the non-static member doesn't exist yet). Similarly, you can call a static function by Class::fun() but you can't do so for a non-static fun(), b/c non-static member/functions are depending on specific objects/instances!\
3. static member can only be 
\b defined outside the class body
\b0 , usually at the start of the .cpp file (why? b/c if we define it in ctor or init list, then every creation of instance will assign the static member)\
4. static member can be accessed via Class::var_name  outside the class body (according to public/private qualifier). If we want to access\
5. you can use a static function to manage the static member variables.\
6. a static member must be initialized (in .cpp)\
\
Q: what if I want to have a static pointer member? I can initialize by a "new", but how can I delete it? e.g.:\
\
.h:\
class A \{\
		public:\
			static int* a;\
\};\
\
.cpp (defined outside the class body):\
int* A::a = new int(0); // where to delete it then?\
\
Option1: at the end of my main(), manually delete it by delete A::a; but, when we are in a big project, we can't tell the user "remember to delete it"! it's not an elegant solution\
Option2: create a static struct (or helper subclass) inside this class, to let its ctor and dtor do the new & delete work. e.g.:\
Ref: \
https://www.developerfusion.com/thread/49467/how-do-i-initialise-clean-up-static-variables\
.h:\
class A \{\
		public: // definition\
			struct staticMember \{\
					int* a;\
					// ctor\
					staticMember() \{\
							a = new int(0);\
					\}	\
					// dtor\
					~staticMember() \{\
							delete a; a = NULL;\
					\}\
			\};\
		\
		public:\
			static staticMember hello;\
\};\
\
.cpp:\
A::staticMember A::hello; // this will call its default ctor \
\

\b Doxygen:\

\b0 1. Comment style: Expert-Project-JAVADOC_AUTOBRIEF-YES\
2. Hide source code: Expert-Source Browser-STRIP_CODE_COMMENT/REFERENCE_LINK_SOURCE/VERBATIM_HEADER-NO\
3. Run Doxygen (need to check TeX and Graphviz installation)\

\b \
HTML:\

\b0 1. login to UI webhost:\
https://webhost.engr.illinois.edu
\b \

\b0 2. create folder and "drag" the Doxygen files to that folder\
3. open the index page with the following link:
\b \
{\field{\*\fldinst{HYPERLINK "http://hhuang81.web.engr.illinois.edu/FEM/html/index.html"}}{\fldrslt 
\b0 http://hhuang81.web.engr.illinois.edu/FEM/html/index.html}}
\b0 \
\

\b const qualifier:\

\b0 read from right to left, e.g.:\
int const * -- pointer to a const int\
int * const -- const pointer to a int\
Ref:\
https://stackoverflow.com/questions/1143262/what-is-the-difference-between-const-int-const-int-const-and-int-const\
http://www.cnblogs.com/jiabei521/p/3335676.html\
\
Initialize Eigen object with external STL array/vector:\
use Eigen::Map:\
\pard\pardeftab720\partightenfactor0

\f1\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
std::\cf4 vector\cf5 <double>\cf2  a = \{\cf5 1\cf2 , \cf5 2\cf2 , \cf5 3\cf2 , \cf5 4\cf2 \};\
\cf4 Eigen\cf2 ::\cf4 VectorXd\cf2  b = \cf4 Eigen\cf2 ::\cf4 Map\cf2 <\cf4 Eigen\cf2 ::\cf4 VectorXd\cf2 , \cf4 Eigen\cf2 ::\cf4 Unaligned\cf2 >(a.data(), a.size());\
\pard\pardeftab720\partightenfactor0

\f2 \cf6 \cb7 If the 
\f1 \cb3 a
\f2 \cb7  is instead a 
\f1 \cb3 const std::vector<double>
\f2 \cb7 , then change 
\f1 \cb3 Eigen::VectorXd
\f2 \cb7  to 
\f1 \cb3 const Eigen::VectorXd
\f0\fs48 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 Ref:\
http://eigen.tuxfamily.org/dox/group__QuickRefPage.html#title4\
https://stackoverflow.com/questions/17036818/initialise-eigenvector-with-stdvector/17037695\
https://stackoverflow.com/questions/36417836/assigning-a-vector-to-a-matrix-column-in-eigen?rq=1\
https://eigen.tuxfamily.org/dox/group__TopicStlContainers.html\
\
}